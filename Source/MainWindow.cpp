/*
  ==============================================================================

    This file was auto-generated by the Jucer!

    It contains the basic outline for a simple desktop window.

  ==============================================================================
*/

#include "MainWindow.h"
#include "UI/StackHeaderComponent.h"
#include "UI/StackNavigationList.h"
#include "UI/AnimatedStackComponent.h"
#include "UI/StackAnimator.h"
#include "UI/SlideAnimator.h"
#include "UI/ValueTreeStackPanel.h"

//==============================================================================

class TestComponent	:	public Component
{
    public:

        TestComponent () 
        {
            addAndMakeVisible (&header);
            slideAnimator = new SlideAnimator();

            addAndMakeVisible (stack = new AnimatedStackComponent (slideAnimator));
            addAndMakeVisible (&nav);
            header.setComponentID("Header");
            stack->setComponentID("Stack");
            nav.setComponentID("Nav");

            header.setTargetStack (stack);
            nav.setTargetStack (stack);

            header.setInterceptsMouseClicks (false,true);

            nav.setBounds ("0,0,150,parent.height");
            header.setBounds ("Nav.right,0,parent.width,40");
            stack->setBounds ("Header.left,Header.bottom,parent.width,parent.height");

            ScopedPointer<XmlElement> xml = XmlDocument::parse (BinaryData::StackDemo_jucer);
            if (xml != 0)
            {
                ValueTreeStackPanel* rootPanel = new ValueTreeStackPanel(ValueTree::fromXml (*xml));
                stack->push (rootPanel,true,true,false);
            }

        }

        ~TestComponent ()
        {
        }

    private:

        StackHeaderComponent header;
        StackNavigationList nav;
        ScopedPointer <AnimatedStackComponent> stack;
        SlideAnimator::Ptr slideAnimator;
        
};



//==============================================================================
    MainAppWindow::MainAppWindow()
: DocumentWindow (JUCEApplication::getInstance()->getApplicationName(),
        Colours::lightgrey,
        DocumentWindow::allButtons)
{
    centreWithSize (500, 400);
    setVisible (true);

    TestComponent* test = new TestComponent ();
    setContentOwned (test,false);
    setResizable (true,false);

}

MainAppWindow::~MainAppWindow()
{
}

void MainAppWindow::closeButtonPressed()
{
    JUCEApplication::getInstance()->systemRequestedQuit();
}
